import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'

export const generatePlagiarismReport = async (results) => {
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    let yPosition = 20

    // Helper function to add text with word wrapping
    const addText = (text, x, y, maxWidth, fontSize = 12) => {
        pdf.setFontSize(fontSize)
        const lines = pdf.splitTextToSize(text, maxWidth)
        pdf.text(lines, x, y)
        return y + (lines.length * fontSize * 0.4)
    }

    // Header
    pdf.setFontSize(20)
    pdf.setTextColor(102, 126, 234)
    pdf.text('BMI Campus - Plagiarism Report', 20, yPosition)
    yPosition += 15

    // Date and time
    pdf.setFontSize(10)
    pdf.setTextColor(100, 100, 100)
    pdf.text(`Generated on: ${new Date(results.timestamp).toLocaleString()}`, 20, yPosition)
    yPosition += 15

    // Separator line
    pdf.setDrawColor(200, 200, 200)
    pdf.line(20, yPosition, pageWidth - 20, yPosition)
    yPosition += 15

    // Overall Score Section
    pdf.setFontSize(16)
    pdf.setTextColor(0, 0, 0)
    pdf.text('Overall Plagiarism Score', 20, yPosition)
    yPosition += 10

    // Score display
    pdf.setFontSize(24)
    const scoreColor = results.overallScore <= 10 ? [74, 222, 128] :
        results.overallScore <= 25 ? [245, 158, 11] : [239, 68, 68]
    pdf.setTextColor(...scoreColor)
    pdf.text(`${results.overallScore}%`, 20, yPosition)
    yPosition += 15

    // Score interpretation
    pdf.setFontSize(12)
    pdf.setTextColor(0, 0, 0)
    const interpretation = results.overallScore <= 10 ? 'Low plagiarism detected - Content appears to be mostly original' :
        results.overallScore <= 25 ? 'Moderate plagiarism detected - Review and cite sources properly' :
            'High plagiarism detected - Significant revision required'
    yPosition = addText(interpretation, 20, yPosition, pageWidth - 40)
    yPosition += 10

    // Document Information
    pdf.setFontSize(14)
    pdf.text('Document Information', 20, yPosition)
    yPosition += 10

    pdf.setFontSize(10)
    yPosition = addText(`Document: ${results.checkedContent}`, 20, yPosition, pageWidth - 40)
    yPosition = addText(`Word Count: ${results.wordCount.toLocaleString()}`, 20, yPosition, pageWidth - 40)
    yPosition = addText(`Sources Found: ${results.sources.length}`, 20, yPosition, pageWidth - 40)
    yPosition += 15

    // Sources Section
    if (results.sources.length > 0) {
        pdf.setFontSize(14)
        pdf.text('Matching Sources', 20, yPosition)
        yPosition += 10

        results.sources.forEach((source, index) => {
            // Check if we need a new page
            if (yPosition > pageHeight - 60) {
                pdf.addPage()
                yPosition = 20
            }

            pdf.setFontSize(12)
            pdf.setTextColor(102, 126, 234)
            yPosition = addText(`${index + 1}. ${source.title}`, 20, yPosition, pageWidth - 40, 12)

            pdf.setFontSize(10)
            pdf.setTextColor(0, 0, 0)
            yPosition = addText(`URL: ${source.url}`, 25, yPosition, pageWidth - 45, 10)
            yPosition = addText(`Similarity: ${source.similarity}%`, 25, yPosition, pageWidth - 45, 10)
            yPosition = addText(`Matched Text: "${source.matchedText}"`, 25, yPosition, pageWidth - 45, 10)
            yPosition += 10
        })
    }

    // Recommendations
    if (yPosition > pageHeight - 100) {
        pdf.addPage()
        yPosition = 20
    }

    pdf.setFontSize(14)
    pdf.setTextColor(0, 0, 0)
    pdf.text('Recommendations', 20, yPosition)
    yPosition += 10

    const recommendations = [
        'Always cite sources properly and use quotation marks for direct quotes.',
        'Paraphrase content in your own words rather than copying directly.',
        'Use proper citation formats (APA, MLA, etc.) as required by your institution.',
        'When in doubt, cite the source to avoid unintentional plagiarism.'
    ]

    pdf.setFontSize(10)
    recommendations.forEach((rec, index) => {
        yPosition = addText(`${index + 1}. ${rec}`, 20, yPosition, pageWidth - 40, 10)
        yPosition += 5
    })

    // Footer
    pdf.setFontSize(8)
    pdf.setTextColor(100, 100, 100)
    pdf.text('Generated by BMI Campus Plagiarism Checker', 20, pageHeight - 10)

    // Save the PDF
    const fileName = `plagiarism-report-${new Date().toISOString().split('T')[0]}.pdf`
    pdf.save(fileName)
}

export const generateDetailedReport = async (results, elementId) => {
    try {
        const element = document.getElementById(elementId)
        if (!element) {
            throw new Error('Report element not found')
        }

        const canvas = await html2canvas(element, {
            scale: 2,
            useCORS: true,
            backgroundColor: '#0f0f23'
        })

        const imgData = canvas.toDataURL('image/png')
        const pdf = new jsPDF()
        const imgWidth = 210
        const pageHeight = 295
        const imgHeight = (canvas.height * imgWidth) / canvas.width
        let heightLeft = imgHeight

        let position = 0

        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
        heightLeft -= pageHeight

        while (heightLeft >= 0) {
            position = heightLeft - imgHeight
            pdf.addPage()
            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
            heightLeft -= pageHeight
        }

        const fileName = `detailed-plagiarism-report-${new Date().toISOString().split('T')[0]}.pdf`
        pdf.save(fileName)
    } catch (error) {
        console.error('Error generating detailed report:', error)
        throw error
    }
}